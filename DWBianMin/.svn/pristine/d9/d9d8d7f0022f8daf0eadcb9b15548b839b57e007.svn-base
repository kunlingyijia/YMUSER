//
//  OnlinePayController.m
//  Go
//
//  Created by 月美 刘 on 16/8/27.
//  Copyright © 2016年 月美 刘. All rights reserved.
//

#import "OnlinePayController.h"
#import "RequestMyBminorderDetailModel.h"
#import "RequestMyBminorderDetail.h"
#import "RequestPayGoodsOrder.h"
#import "RequestPayGoodsOrderModel.h"
#import "RequestPayBminOrder.h"
#import "RequestPayBminOrderModel.h"
#import "RequestBminserviceListModel.h"
#import "OrderDetailViewController.h"
@interface OnlinePayController ()
@property (nonatomic, strong) RequestMyBminorderDetailModel *orderModel;
@property (nonatomic, assign) NSInteger payType;
@end

@implementation OnlinePayController

- (void)viewDidLoad {
    [super viewDidLoad];
    
    self.OContentSizeHeight.constant = Height;
    [self showBackBtn];
    self.title = @"线上支付";
    self.payType = 1;
    self.confirmPayBtn.layer.masksToBounds = YES;
    self.confirmPayBtn.layer.cornerRadius = 4;
    UITapGestureRecognizer *aliTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(selectedaliPayAction:)];
    [self.aliPayBgview addGestureRecognizer:aliTap];
    UITapGestureRecognizer *wxTap = [[UITapGestureRecognizer alloc] initWithTarget:self action:@selector(selectedWXpay:)];
    [self.wxPayBgview addGestureRecognizer:wxTap];
    
    [self getOrderMessage];
    //支付成功后的通知
    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(paySuccessAction:) name:@"支付成功" object:nil];
    
}
- (void)paySuccessAction:(NSNotification *)sender {
    OrderDetailViewController *detailC = [[OrderDetailViewController alloc] initWithNibName:@"OrderDetailViewController" bundle:nil];
    detailC.commitOrderC = 6;
    detailC.orderNo = self.orderModel.orderNo;
    detailC.bminOrderId = self.orderModel.bminOrderId;
    [self showSuccessWith:@"支付成功"];
    [self.navigationController pushViewController:detailC animated:YES];
}


- (void)viewGetData {
    [self loadImageWithView:self.merchantImage urlStr:self.orderModel.iconUrl];
    self.merchantName.text = self.orderModel.merchantName;
    self.merchantDescribe.text = self.orderModel.content;
    self.remark.text = self.orderModel.content;
    self.remark.text = self.orderModel.content;
    [self createOrederList];
    
}

- (void)createOrederList {
    CGFloat viewWidth = (Width - 50)/2;
    NSInteger count = 0;
    NSInteger arrCount = self.orderModel.bminServiceList.count/2;
    NSInteger indexIndex = self.orderModel.bminServiceList.count%2;
    NSInteger maxI = 0;
    if (self.orderModel.bminServiceList.count == 0) {
        maxI = 0;
    }else if (self.orderModel.bminServiceList.count < 3) {
        maxI = 1;
    }else if (indexIndex == 0) {
        maxI = arrCount;
    }else if (indexIndex != 0) {
        maxI = arrCount + 1;
    }
    for (int i = 0; i< maxI; i++) {
        for (int j = 0; j < 2; j++) {
            UIView *orderV = [self getOrderView:count];
            orderV.frame = CGRectMake(20 + j*(viewWidth+10), 10 + i * 60, viewWidth, 50);
            count = count + 1;
            if (i == maxI-1) {
                if (indexIndex == 0 && j == 1) {
                    self.orderBgHeight.constant = 60 * arrCount+10;
                    self.OContentSizeHeight.constant = 600 + self.orderBgHeight.constant;
//                    self.myVHeight = self.cornerHeight.constant;
                    break;
                }else if (indexIndex != 0 && j == 0) {
                    self.orderBgHeight.constant = 60 * arrCount+70;
                    self.OContentSizeHeight.constant = 600 + self.orderBgHeight.constant;//                    self.myVHeight = self.cornerHeight.constant;
                    break;
                }
            }
        }
    }
}

- (UIView *)getOrderView:(NSInteger)count {
    RequestBminserviceListModel *model = [RequestBminserviceListModel yy_modelWithJSON:self.orderModel.bminServiceList[count]];
    UIView *orderV = [[UIView alloc] init];
    orderV.backgroundColor = [UIColor whiteColor];

    [self.orderBgview addSubview:orderV];
    UILabel *price = [UILabel new];
    price.textAlignment = NSTextAlignmentCenter;
    NSLog(@"%f", model.price);
    price.text = [NSString stringWithFormat:@"¥%.2f", model.price];
    price.font = [UIFont systemFontOfSize:14];
    price.textColor = [UIColor colorWithHexString:kNavigationBgColor];
    [orderV addSubview:price];
    [price mas_makeConstraints:^(MASConstraintMaker *make) {
        make.right.equalTo(orderV);
        make.left.equalTo(orderV);
        make.bottom.equalTo(orderV);
        make.height.mas_equalTo(@(30));
    }];
    UIView *cancelBtn = [[UIImageView alloc] initWithImage:[UIImage imageNamed:@"打钩"]];
    cancelBtn.contentMode = UIViewContentModeScaleAspectFit;
    [orderV addSubview:cancelBtn];
    [cancelBtn mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(orderV).with.offset(2);
        make.right.equalTo(orderV).with.offset(-5);
        make.size.mas_equalTo(CGSizeMake(17, 17));
    }];
    
    UILabel *nameL = [UILabel new];
    nameL.text = model.serviceName;
    nameL.textAlignment = NSTextAlignmentCenter;
    nameL.textColor = [UIColor colorWithHexString:@"#888888"];
    nameL.font = [UIFont systemFontOfSize:14];
    [orderV addSubview:nameL];
    [nameL mas_makeConstraints:^(MASConstraintMaker *make) {
        make.top.equalTo(orderV);
        make.left.equalTo(orderV);
        make.right.equalTo(orderV);
        make.bottom.equalTo(price.mas_top);
    }];
    orderV.tag = (count + 1) * 100;
    cancelBtn.tag = (count + 1) * 100 +1;
    return orderV;
}







- (void)selectedaliPayAction:(UITapGestureRecognizer *)sender {
    self.payType = 1;
    self.chooseZhifubao.hidden = NO;
    self.chooseWeixin.hidden = YES;
}

- (void)selectedWXpay:(UITapGestureRecognizer *)sender {
    self.payType = 2;
    self.chooseZhifubao.hidden = YES;
    self.chooseWeixin.hidden = NO;
}

- (IBAction)ConfirmPayBtnClick:(id)sender {
    if (self.payType == 1) {
        UIAlertController *alertC = [UIAlertController alertControllerWithTitle:@"提示" message:@"请输入支付金额" preferredStyle:UIAlertControllerStyleAlert];
        [alertC addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
            textField.keyboardType = UIKeyboardTypeDecimalPad;
        }];
        UITextField *textField = [alertC.textFields firstObject];
        
        [alertC addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            
        }]];
        
        [alertC addAction:[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            
            [self getdataWith:textField.text  withPayType:1];
        }]];
        [self presentViewController:alertC animated:YES completion:^{
            
        }];
    }else {
        UIAlertController *alertC = [UIAlertController alertControllerWithTitle:@"提示" message:@"请输入支付金额" preferredStyle:UIAlertControllerStyleAlert];
        [alertC addTextFieldWithConfigurationHandler:^(UITextField * _Nonnull textField) {
            textField.keyboardType = UIKeyboardTypePhonePad;
            
        }];
        UITextField *textField = [alertC.textFields firstObject];
        [alertC addAction:[UIAlertAction actionWithTitle:@"取消" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            
        }]];
        
        [alertC addAction:[UIAlertAction actionWithTitle:@"确定" style:UIAlertActionStyleDefault handler:^(UIAlertAction * _Nonnull action) {
            [self getdataWith:textField.text  withPayType:2];
        }]];
        [self presentViewController:alertC animated:YES completion:^{
            
        }];
        
        
    }
}

- (void)aliPayWith:(RequestPayBminOrderModel *)payModel {
    [DWHelper AliPayActionWithOrderStr:payModel.prealipay];
}

- (void)WXpay:(RequestPayBminOrderModel *)model {
    [DWHelper  WXpayAction:model.prepayid withpartnerId:model.partnerid withpackage:model.package withnonceStr:model.noncestr withtimeStamp:model.timestamp withsign:model.sign];
}




- (void)getOrderMessage {
    RequestMyBminorderDetail *detail = [[RequestMyBminorderDetail alloc] init];
    detail.orderNo = self.orderNo;
    detail.bminOrderId = self.bminOrderId;
    BaseRequest *baseReq = [[BaseRequest alloc] init];
    baseReq.token = [AuthenticationModel getLoginToken];
    baseReq.encryptionType = AES;
    baseReq.data = [AESCrypt encrypt:[detail yy_modelToJSONString] password:[AuthenticationModel getLoginKey]];
    [[DWHelper shareHelper] requestDataWithParm:[baseReq yy_modelToJSONString] act:@"act=Api/Order/requestMyBminorderDetail" sign:[baseReq.data MD5Hash] requestMethod:GET success:^(id response) {
        BaseResponse *baseRes = [BaseResponse yy_modelWithJSON:response];
        if (baseRes.resultCode == 1) {
            self.orderModel = [RequestMyBminorderDetailModel yy_modelWithJSON:baseRes.data];
            [self viewGetData];
        }else {
            [ProcessResultCode processResultCodeWithBaseRespone:baseRes viewControll:self];
        }
    } faild:^(id error) {
        
    }];
}

#pragma mark - 支付
- (void)getdataWith:(NSString *)price withPayType:(NSInteger)payType {
    RequestPayBminOrder *bmOrder = [[RequestPayBminOrder alloc] init];
    bmOrder.payAmount = price;
    bmOrder.payType = payType;
    bmOrder.orderNo = self.orderModel.orderNo;
    bmOrder.bminOrderId =self.orderModel.bminOrderId;
    bmOrder.bminOrderId =self.orderModel.bminOrderId;
    BaseRequest *baseReq = [[BaseRequest alloc] init];
    baseReq.token = [AuthenticationModel getLoginToken];
    baseReq.encryptionType = AES;
    baseReq.data = [AESCrypt encrypt:[bmOrder yy_modelToJSONString] password:[AuthenticationModel getLoginKey]];
    [[DWHelper shareHelper] requestDataWithParm:[baseReq yy_modelToJSONString] act:@"act=Api/Order/requestPayBminOrder" sign:[baseReq.data MD5Hash] requestMethod:GET success:^(id response) {
        NSLog(@"%@", response);
        BaseResponse *baseRes = [BaseResponse yy_modelWithJSON:response];
        if (baseRes.resultCode == 1) {
            RequestPayBminOrderModel *payModel = [RequestPayBminOrderModel yy_modelWithJSON:baseRes.data];
            if (payType == 1) {
                [self aliPayWith:payModel];
            }else if(payType == 2) {
                [self WXpay:payModel];
            }
        }else {
            [ProcessResultCode processResultCodeWithBaseRespone:baseRes viewControll:self];
        }
    } faild:^(id error) {
        
    }];
}


@end
